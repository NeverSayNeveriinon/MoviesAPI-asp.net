// <auto-generated />
using System;
using Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Name")
                        .HasColumnType("tinyint");

                    b.Property<string>("Summary")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("ID");

                    b.ToTable("Genres", "dbo");

                    b.HasData(
                        new
                        {
                            ID = new Guid("bf8c2d12-5271-4d54-ad9f-04c655a8657e"),
                            Name = (byte)0,
                            Summary = "a show genre called Drama"
                        },
                        new
                        {
                            ID = new Guid("e51325d4-34f0-42b0-9ac5-a92fc028da7a"),
                            Name = (byte)7,
                            Summary = "a show genre called Crime"
                        },
                        new
                        {
                            ID = new Guid("69f4ac8f-dfc1-4597-811b-7a7853540b91"),
                            Name = (byte)2,
                            Summary = "a show genre called Thriller"
                        },
                        new
                        {
                            ID = new Guid("c4535ccd-b984-46b5-a440-de61612684d0"),
                            Name = (byte)8,
                            Summary = "a show genre called Sci_Fi"
                        },
                        new
                        {
                            ID = new Guid("81e8f391-5290-49db-a14d-3ddcdf0c0307"),
                            Name = (byte)6,
                            Summary = "a show genre called Mystery"
                        },
                        new
                        {
                            ID = new Guid("4f803afc-54bd-4ce7-a7c9-5e01801dc1d0"),
                            Name = (byte)9,
                            Summary = "a show genre called Action"
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.JoinEntities.SeriesDirectorsJoin", b =>
                {
                    b.Property<Guid>("DirectorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SerialID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DirectorID", "SerialID");

                    b.HasIndex("SerialID");

                    b.ToTable("SeriesDirectorsJoin", "dbo");

                    b.HasData(
                        new
                        {
                            DirectorID = new Guid("b165c22a-cbb8-4fe9-8697-13d5400379b0"),
                            SerialID = new Guid("b8de724f-9910-4686-b7a0-7f79be0ae604")
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.JoinEntities.ShowsArtistsJoin", b =>
                {
                    b.Property<Guid>("ArtistID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShowID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtistID", "ShowID");

                    b.HasIndex("ShowID");

                    b.ToTable("ShowsArtistsJoin", "dbo");

                    b.HasData(
                        new
                        {
                            ArtistID = new Guid("63e90859-dbce-4436-877c-f5c4731c1ce2"),
                            ShowID = new Guid("499ac217-491c-44e6-95a7-ecaaccf98c68")
                        },
                        new
                        {
                            ArtistID = new Guid("ac0e7576-52cf-42ec-b56e-035b9d72177e"),
                            ShowID = new Guid("bfce8308-86eb-4bc6-9af6-42eb169d6590")
                        },
                        new
                        {
                            ArtistID = new Guid("24e28be2-d38a-43a0-8c4f-7112728e82ea"),
                            ShowID = new Guid("5e8887ac-fd4e-46c4-8f16-62e6ac1aad2a")
                        },
                        new
                        {
                            ArtistID = new Guid("ac0e7576-52cf-42ec-b56e-035b9d72177e"),
                            ShowID = new Guid("a95591f5-dd0f-4a4b-9cec-038092363c56")
                        },
                        new
                        {
                            ArtistID = new Guid("24e28be2-d38a-43a0-8c4f-7112728e82ea"),
                            ShowID = new Guid("5b0480af-6013-423d-8b20-90a979a87f10")
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.JoinEntities.ShowsGenresJoin", b =>
                {
                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShowID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenreID", "ShowID");

                    b.HasIndex("ShowID");

                    b.ToTable("ShowsGenresJoin", "dbo");

                    b.HasData(
                        new
                        {
                            GenreID = new Guid("c4535ccd-b984-46b5-a440-de61612684d0"),
                            ShowID = new Guid("fd9de4b8-4334-437e-a398-30dfc8b6c414")
                        },
                        new
                        {
                            GenreID = new Guid("4f803afc-54bd-4ce7-a7c9-5e01801dc1d0"),
                            ShowID = new Guid("fd9de4b8-4334-437e-a398-30dfc8b6c414")
                        },
                        new
                        {
                            GenreID = new Guid("c4535ccd-b984-46b5-a440-de61612684d0"),
                            ShowID = new Guid("499ac217-491c-44e6-95a7-ecaaccf98c68")
                        },
                        new
                        {
                            GenreID = new Guid("e51325d4-34f0-42b0-9ac5-a92fc028da7a"),
                            ShowID = new Guid("5e8887ac-fd4e-46c4-8f16-62e6ac1aad2a")
                        },
                        new
                        {
                            GenreID = new Guid("81e8f391-5290-49db-a14d-3ddcdf0c0307"),
                            ShowID = new Guid("5e8887ac-fd4e-46c4-8f16-62e6ac1aad2a")
                        },
                        new
                        {
                            GenreID = new Guid("69f4ac8f-dfc1-4597-811b-7a7853540b91"),
                            ShowID = new Guid("00cb4ff8-1cad-4da3-afc6-fd36cda5b1af")
                        },
                        new
                        {
                            GenreID = new Guid("81e8f391-5290-49db-a14d-3ddcdf0c0307"),
                            ShowID = new Guid("00cb4ff8-1cad-4da3-afc6-fd36cda5b1af")
                        },
                        new
                        {
                            GenreID = new Guid("69f4ac8f-dfc1-4597-811b-7a7853540b91"),
                            ShowID = new Guid("bfce8308-86eb-4bc6-9af6-42eb169d6590")
                        },
                        new
                        {
                            GenreID = new Guid("c4535ccd-b984-46b5-a440-de61612684d0"),
                            ShowID = new Guid("bfce8308-86eb-4bc6-9af6-42eb169d6590")
                        },
                        new
                        {
                            GenreID = new Guid("4f803afc-54bd-4ce7-a7c9-5e01801dc1d0"),
                            ShowID = new Guid("a95591f5-dd0f-4a4b-9cec-038092363c56")
                        },
                        new
                        {
                            GenreID = new Guid("e51325d4-34f0-42b0-9ac5-a92fc028da7a"),
                            ShowID = new Guid("a95591f5-dd0f-4a4b-9cec-038092363c56")
                        },
                        new
                        {
                            GenreID = new Guid("69f4ac8f-dfc1-4597-811b-7a7853540b91"),
                            ShowID = new Guid("5b0480af-6013-423d-8b20-90a979a87f10")
                        },
                        new
                        {
                            GenreID = new Guid("4f803afc-54bd-4ce7-a7c9-5e01801dc1d0"),
                            ShowID = new Guid("5b0480af-6013-423d-8b20-90a979a87f10")
                        },
                        new
                        {
                            GenreID = new Guid("69f4ac8f-dfc1-4597-811b-7a7853540b91"),
                            ShowID = new Guid("d4a28b46-b993-4da7-a95c-10a649e32e18")
                        },
                        new
                        {
                            GenreID = new Guid("e51325d4-34f0-42b0-9ac5-a92fc028da7a"),
                            ShowID = new Guid("d4a28b46-b993-4da7-a95c-10a649e32e18")
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.JoinEntities.ShowsWritersJoin", b =>
                {
                    b.Property<Guid>("ShowID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WriterID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShowID", "WriterID");

                    b.HasIndex("WriterID");

                    b.ToTable("ShowsWritersJoin", "dbo");

                    b.HasData(
                        new
                        {
                            ShowID = new Guid("fd9de4b8-4334-437e-a398-30dfc8b6c414"),
                            WriterID = new Guid("73308ea6-f6f4-41c8-928b-ee6a4832357c")
                        },
                        new
                        {
                            ShowID = new Guid("499ac217-491c-44e6-95a7-ecaaccf98c68"),
                            WriterID = new Guid("73308ea6-f6f4-41c8-928b-ee6a4832357c")
                        },
                        new
                        {
                            ShowID = new Guid("499ac217-491c-44e6-95a7-ecaaccf98c68"),
                            WriterID = new Guid("e5f623df-90df-4fab-831a-ce5547812810")
                        },
                        new
                        {
                            ShowID = new Guid("5e8887ac-fd4e-46c4-8f16-62e6ac1aad2a"),
                            WriterID = new Guid("76b25d7d-508e-4bc6-bccc-d696e2c08516")
                        },
                        new
                        {
                            ShowID = new Guid("00cb4ff8-1cad-4da3-afc6-fd36cda5b1af"),
                            WriterID = new Guid("e5f623df-90df-4fab-831a-ce5547812810")
                        },
                        new
                        {
                            ShowID = new Guid("bfce8308-86eb-4bc6-9af6-42eb169d6590"),
                            WriterID = new Guid("73308ea6-f6f4-41c8-928b-ee6a4832357c")
                        },
                        new
                        {
                            ShowID = new Guid("bfce8308-86eb-4bc6-9af6-42eb169d6590"),
                            WriterID = new Guid("e5f623df-90df-4fab-831a-ce5547812810")
                        },
                        new
                        {
                            ShowID = new Guid("a95591f5-dd0f-4a4b-9cec-038092363c56"),
                            WriterID = new Guid("73308ea6-f6f4-41c8-928b-ee6a4832357c")
                        },
                        new
                        {
                            ShowID = new Guid("a95591f5-dd0f-4a4b-9cec-038092363c56"),
                            WriterID = new Guid("e5f623df-90df-4fab-831a-ce5547812810")
                        },
                        new
                        {
                            ShowID = new Guid("5b0480af-6013-423d-8b20-90a979a87f10"),
                            WriterID = new Guid("76b25d7d-508e-4bc6-bccc-d696e2c08516")
                        },
                        new
                        {
                            ShowID = new Guid("d4a28b46-b993-4da7-a95c-10a649e32e18"),
                            WriterID = new Guid("063565a3-5879-4226-8a73-44105188ccbf")
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("GenderName")
                        .HasColumnType("tinyint");

                    b.Property<byte>("JobName")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Summary")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("ID");

                    b.ToTable("Persons", "dbo");

                    b.HasData(
                        new
                        {
                            ID = new Guid("26fd500a-2a6b-454c-9d63-090d6208181d"),
                            DateOfBirth = new DateOnly(1970, 7, 30),
                            FirstName = "Christopher",
                            GenderName = (byte)0,
                            JobName = (byte)1,
                            LastName = "Nolan",
                            Summary = "this is Chris Nolan as director"
                        },
                        new
                        {
                            ID = new Guid("73308ea6-f6f4-41c8-928b-ee6a4832357c"),
                            DateOfBirth = new DateOnly(1970, 7, 30),
                            FirstName = "Christopher",
                            GenderName = (byte)0,
                            JobName = (byte)2,
                            LastName = "Nolan",
                            Summary = "this is Chris Nolan as writer"
                        },
                        new
                        {
                            ID = new Guid("b165c22a-cbb8-4fe9-8697-13d5400379b0"),
                            DateOfBirth = new DateOnly(1962, 8, 28),
                            FirstName = "David",
                            GenderName = (byte)0,
                            JobName = (byte)1,
                            LastName = "Fincher",
                            Summary = "this is Fincher"
                        },
                        new
                        {
                            ID = new Guid("e5f623df-90df-4fab-831a-ce5547812810"),
                            DateOfBirth = new DateOnly(1976, 6, 6),
                            FirstName = "Jonathan",
                            GenderName = (byte)0,
                            JobName = (byte)2,
                            LastName = "Nolan",
                            Summary = "this is Jon Nolan"
                        },
                        new
                        {
                            ID = new Guid("9c4ee8f2-2919-48a3-9729-fdce1248da14"),
                            DateOfBirth = new DateOnly(1969, 9, 14),
                            FirstName = "Bong",
                            GenderName = (byte)0,
                            JobName = (byte)1,
                            LastName = "Joon-ho",
                            Summary = "this is Joon-ho as director"
                        },
                        new
                        {
                            ID = new Guid("063565a3-5879-4226-8a73-44105188ccbf"),
                            DateOfBirth = new DateOnly(1969, 9, 14),
                            FirstName = "Bong",
                            GenderName = (byte)0,
                            JobName = (byte)2,
                            LastName = "Joon-ho",
                            Summary = "this is Joon-ho as writer"
                        },
                        new
                        {
                            ID = new Guid("63e90859-dbce-4436-877c-f5c4731c1ce2"),
                            DateOfBirth = new DateOnly(1982, 11, 12),
                            FirstName = "Anne",
                            GenderName = (byte)1,
                            JobName = (byte)0,
                            LastName = "Hathaway",
                            Summary = "this is Hathaway"
                        },
                        new
                        {
                            ID = new Guid("76b25d7d-508e-4bc6-bccc-d696e2c08516"),
                            DateOfBirth = new DateOnly(1964, 8, 14),
                            FirstName = "Andrew",
                            GenderName = (byte)0,
                            JobName = (byte)2,
                            LastName = " Kevin Walker",
                            Summary = "this is Walker"
                        },
                        new
                        {
                            ID = new Guid("ac0e7576-52cf-42ec-b56e-035b9d72177e"),
                            DateOfBirth = new DateOnly(1974, 1, 30),
                            FirstName = "Christian",
                            GenderName = (byte)0,
                            JobName = (byte)0,
                            LastName = "Bale",
                            Summary = "this is Bale"
                        },
                        new
                        {
                            ID = new Guid("24e28be2-d38a-43a0-8c4f-7112728e82ea"),
                            DateOfBirth = new DateOnly(1963, 12, 18),
                            FirstName = "Brad",
                            GenderName = (byte)0,
                            JobName = (byte)0,
                            LastName = "Pitt",
                            Summary = "this is Pitt"
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Show", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("IMDBPage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("IMDBRating")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Languages")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PublishYear")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.HasKey("ID");

                    b.ToTable("Shows", "dbo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Show");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9298e4a1-35e7-4702-a299-d1dbd68e18c8"),
                            ConcurrencyStamp = "7a4a539a-5eea-4fad-b198-cb300b77ddfb",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("9fa250cf-7c4a-4547-bc3e-793886ee3333"),
                            ConcurrencyStamp = "7a58dcf2-3449-4827-a268-b253c86ef9de",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("Core.Domain.Entities.Movie", b =>
                {
                    b.HasBaseType("Core.Domain.Entities.Show");

                    b.Property<Guid>("DirectorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasIndex("DirectorID");

                    b.HasDiscriminator().HasValue("Movie");

                    b.HasData(
                        new
                        {
                            ID = new Guid("fd9de4b8-4334-437e-a398-30dfc8b6c414"),
                            CountryName = "USA",
                            IMDBPage = "page1",
                            IMDBRating = 8.8000000000000007,
                            ImagePath = "path1",
                            Languages = 1,
                            Name = "Inception",
                            PublishYear = 2010,
                            Summary = "A movie about time",
                            DirectorID = new Guid("26fd500a-2a6b-454c-9d63-090d6208181d"),
                            Time = new TimeOnly(2, 28, 0)
                        },
                        new
                        {
                            ID = new Guid("499ac217-491c-44e6-95a7-ecaaccf98c68"),
                            CountryName = "USA",
                            IMDBPage = "page2",
                            IMDBRating = 8.6999999999999993,
                            ImagePath = "path2",
                            Languages = 1,
                            Name = "Interstellar",
                            PublishYear = 2014,
                            Summary = "A movie about universe",
                            DirectorID = new Guid("26fd500a-2a6b-454c-9d63-090d6208181d"),
                            Time = new TimeOnly(2, 49, 0)
                        },
                        new
                        {
                            ID = new Guid("5e8887ac-fd4e-46c4-8f16-62e6ac1aad2a"),
                            CountryName = "USA",
                            IMDBPage = "page6",
                            IMDBRating = 8.5999999999999996,
                            ImagePath = "path6",
                            Languages = 1,
                            Name = "Seven",
                            PublishYear = 1995,
                            Summary = "A movie about guilt",
                            DirectorID = new Guid("b165c22a-cbb8-4fe9-8697-13d5400379b0"),
                            Time = new TimeOnly(2, 7, 0)
                        },
                        new
                        {
                            ID = new Guid("00cb4ff8-1cad-4da3-afc6-fd36cda5b1af"),
                            CountryName = "USA",
                            IMDBPage = "page3",
                            IMDBRating = 8.4000000000000004,
                            ImagePath = "path3",
                            Languages = 1,
                            Name = "Memento",
                            PublishYear = 2000,
                            Summary = "A movie about past memories",
                            DirectorID = new Guid("26fd500a-2a6b-454c-9d63-090d6208181d"),
                            Time = new TimeOnly(1, 53, 0)
                        },
                        new
                        {
                            ID = new Guid("bfce8308-86eb-4bc6-9af6-42eb169d6590"),
                            CountryName = "USA",
                            IMDBPage = "page4",
                            IMDBRating = 8.5,
                            ImagePath = "path4",
                            Languages = 1,
                            Name = "Prestige",
                            PublishYear = 2006,
                            Summary = "A movie about magic",
                            DirectorID = new Guid("26fd500a-2a6b-454c-9d63-090d6208181d"),
                            Time = new TimeOnly(2, 10, 0)
                        },
                        new
                        {
                            ID = new Guid("a95591f5-dd0f-4a4b-9cec-038092363c56"),
                            CountryName = "USA",
                            IMDBPage = "page5",
                            IMDBRating = 9.0,
                            ImagePath = "path5",
                            Languages = 1,
                            Name = "The Dark Knight",
                            PublishYear = 2008,
                            Summary = "A movie about batman",
                            DirectorID = new Guid("26fd500a-2a6b-454c-9d63-090d6208181d"),
                            Time = new TimeOnly(2, 32, 0)
                        },
                        new
                        {
                            ID = new Guid("5b0480af-6013-423d-8b20-90a979a87f10"),
                            CountryName = "USA",
                            IMDBPage = "page7",
                            IMDBRating = 8.8000000000000007,
                            ImagePath = "path7",
                            Languages = 1,
                            Name = "Fight Club",
                            PublishYear = 1999,
                            Summary = "A movie about ... (just perfect)",
                            DirectorID = new Guid("b165c22a-cbb8-4fe9-8697-13d5400379b0"),
                            Time = new TimeOnly(2, 19, 0)
                        },
                        new
                        {
                            ID = new Guid("d4a28b46-b993-4da7-a95c-10a649e32e18"),
                            CountryName = "South Korea",
                            IMDBPage = "page8",
                            IMDBRating = 8.0999999999999996,
                            ImagePath = "path8",
                            Languages = 8,
                            Name = "Memories of Murder",
                            PublishYear = 2003,
                            Summary = "A movie about murder",
                            DirectorID = new Guid("9c4ee8f2-2919-48a3-9729-fdce1248da14"),
                            Time = new TimeOnly(2, 12, 0)
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Serial", b =>
                {
                    b.HasBaseType("Core.Domain.Entities.Show");

                    b.Property<int>("EpisodesCount")
                        .HasColumnType("int");

                    b.Property<string>("PublishChannel")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SeasonsCount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Serial");

                    b.HasData(
                        new
                        {
                            ID = new Guid("b8de724f-9910-4686-b7a0-7f79be0ae604"),
                            CountryName = "USA",
                            IMDBPage = "page11",
                            IMDBRating = 8.5999999999999996,
                            ImagePath = "path11",
                            Languages = 1,
                            Name = "Mindhunter",
                            PublishYear = 2017,
                            Summary = "A series about serial killers",
                            EpisodesCount = 19,
                            PublishChannel = "Netflix",
                            SeasonsCount = 2
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.JoinEntities.SeriesDirectorsJoin", b =>
                {
                    b.HasOne("Core.Domain.Entities.Person", "Director")
                        .WithMany("SeriesDirectorsJoin")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.Serial", "Serial")
                        .WithMany("SeriesDirectorsJoin")
                        .HasForeignKey("SerialID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Director");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("Core.Domain.Entities.JoinEntities.ShowsArtistsJoin", b =>
                {
                    b.HasOne("Core.Domain.Entities.Person", "Artist")
                        .WithMany("ShowsArtistsJoin")
                        .HasForeignKey("ArtistID");

                    b.HasOne("Core.Domain.Entities.Show", "Show")
                        .WithMany("ShowsArtistsJoin")
                        .HasForeignKey("ShowID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Artist");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Core.Domain.Entities.JoinEntities.ShowsGenresJoin", b =>
                {
                    b.HasOne("Core.Domain.Entities.Genre", "Genre")
                        .WithMany("ShowsGenresJoin")
                        .HasForeignKey("GenreID")
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.Show", "Show")
                        .WithMany("ShowsGenresJoin")
                        .HasForeignKey("ShowID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Genre");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Core.Domain.Entities.JoinEntities.ShowsWritersJoin", b =>
                {
                    b.HasOne("Core.Domain.Entities.Show", "Show")
                        .WithMany("ShowsWritersJoin")
                        .HasForeignKey("ShowID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Entities.Person", "Writer")
                        .WithMany("ShowsWritersJoin")
                        .HasForeignKey("WriterID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Show");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entities.Movie", b =>
                {
                    b.HasOne("Core.Domain.Entities.Person", "Director")
                        .WithMany("MoviesDirected")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Core.Domain.Entities.Genre", b =>
                {
                    b.Navigation("ShowsGenresJoin");
                });

            modelBuilder.Entity("Core.Domain.Entities.Person", b =>
                {
                    b.Navigation("MoviesDirected");

                    b.Navigation("SeriesDirectorsJoin");

                    b.Navigation("ShowsArtistsJoin");

                    b.Navigation("ShowsWritersJoin");
                });

            modelBuilder.Entity("Core.Domain.Entities.Show", b =>
                {
                    b.Navigation("ShowsArtistsJoin");

                    b.Navigation("ShowsGenresJoin");

                    b.Navigation("ShowsWritersJoin");
                });

            modelBuilder.Entity("Core.Domain.Entities.Serial", b =>
                {
                    b.Navigation("SeriesDirectorsJoin");
                });
#pragma warning restore 612, 618
        }
    }
}
